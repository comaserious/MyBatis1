<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--별칭 설정 config 파일에서 type 별칭 달기-->
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">
    <resultMap id="menuResultMap" type="MenuDto">
        <id property="code" column="menu_code"/>
        <result property="name" column="menu_name"/>
        <result property="price" column="menu_price"/>
        <result property="categoryCode" column="category_code"/>
        <result property="orderableStatus" column="orderable_status"/>
    </resultMap>
    <!--필기. <if> 태그 : test 속성의 조건에 해당할때만 엘리먼트 구문을 쿼리에 포함한다-->
    <!--필기. gte,gt,lte,lt 등
            gte : greater than equal
            lte : less than equl-->
    <select id="selectMenuByPrice" resultMap="menuResultMap" parameterType="hashmap">
        select
            *
        from
            tbl_menu
        where
            orderable_status ='Y'
        <if test="price gte 0 and price lte 10000">
            <!--필기. <![CDATA[문장]]> 문장에 해당하는 공간에서는 부등호에 대한 표현이 자유로움-->
            <![CDATA[
               and menu_price < #{price}
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            and menu_price between 10000 and #{price}
        </if>
        <if test="price gt 20000 and price lte 30000">
            and menu_price between 20000 and #{price}
        </if>
        <if test="price gt 30000">
            and menu_price between 30000 and #{price}
        </if>
        order by
        menu_code
    </select>
    <select id="searchMenu" parameterType="com.ohgiraffers.common.SearchCriteria" resultMap="menuResultMap">
        select
            a.menu_code,
            a.menu_name,
            a.category_code,
            a.menu_price,
            a.orderable_status
        from tbl_menu a
        <if test="condition == 'category'">
            join tbl_category b on a.category_code = b.category_code
        </if>
        where a.orderable_status='Y'
        <if test="condition == 'name'">
            and a.menu_name like concat ('%' ,#{value},'%')
        </if>
        <if test="condition == 'category'">
            and b.category_name = #{value}
        </if>
        order by menu_code
    </select>
    <!--필기. <choose>(when/otherwise) 태그 : java의 switch-case 문의 역할을 한다-->
    <!--필기 . 사용방법
                <choose>
                    <when test = "조건">
                        쿼리문
                    </when>
                    .....
                    <otherwise>
                        쿼리문
                    </otherwiese>
                </choose>-->
    <!--필기. <when> 태그의 test 속성 조건에 부합하면 when 엘리먼트 구문을 쿼리에 포함시킨다
             어떠한 when 조건도 만족하지 못하면 <otherwise> 엘리먼트 구문을 쿼리에 포함시킨다-->
    <select id="searchMenuBySuperCategory" parameterType="criteria" resultMap="menuResultMap">
        select
            menu_code,
            menu_name,
            menu_price,
            category_code,
            orderable_status
        from
            tbl_menu
        where
            orderable_status ='Y'
        <choose>
            <when test="value == '식사'">
                and category_code in (1,4,5)
            </when>
            <when test="value == '음료'">
                and category_code = 2
            </when>
            <otherwise>
                and category_code in (3)
            </otherwise>
        </choose>

        order by menu_code

    </select>
    <!--필기. <foreach> 태그 : java 의 for문 처럼 동작을 한다
                   1. collection 속성 : 반복을 수행할 대상
                   2. item 속성 : 반복을 수행할 때마다 꺼내올 값의 이름 설정
                   3. open 속성 : <foreach> 엘리먼트구문의 가장 앞에 올 문자
                   4. separator 속성 : 반복이 수행될 때 꺼내온 item  사이에 들어갈 문자
                   5. close 속성 : <foreach> 엘리먼트 구문의 마지막에 올 문자-->
    <select id="searchMenuByRandomMenuCode" resultMap="menuResultMap" parameterType="hashmap">
        select
            *
        from
            tbl_menu
        where
            orderable_status = 'Y'
        and
            menu_code in
        <!--                    반복대상(키)     (임의의)불러올 이름     시작    뽑아온 아이템을 세퍼레이터로 구분 close로 닫음     -->
        <foreach collection="randomCodeList" item="menuCode" open="(" separator="," close=")">
            #{menuCode}

        </foreach>
<!--parameter 객체를 안줘도 static 필드나 static 메소드로 직접 접근을 해서 직접 받아올수가 있다 그러면 mapper 인터페이스와 service 에서 전달인자를 안줘도 된다        -->
<!--        <foreach collection="@com.ohgiraffers.section01.xml.Application@createRandomMenuCodeList()">-->
<!--            #{menuCode}-->
<!--        </foreach>-->

    </select>
    <select id="searchMenuByCodeOrSearchAll" resultMap="menuResultMap" parameterType="criteria">
        select
            *
        from
            tbl_menu
<!--필기. <where> 태그 : 엘리먼트 구문이 where 로 시작하지 않으면 자동으로 where 를 붙여준다
                       또한 where 엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where 를 무시한다
                       단, name 부분에 where  를 빼주지 않으면 where where 이렇게 SQL 문이 작성된다
                       엘리먼트 구문이 and 나 or 로 시작하면 자동으로 해당 단어를 지워준다-->
<!-- neq 는 없고 eq 만 존재한다 eq 대신 == 을 써주어도 된다-->
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                menu_code = #{value}
            </where>
        </if>
    </select>
    <!--필기. <where> 태그 : 엘리먼트 구문이 where 로 시작하지 않으면 자동으로 where 를 붙여준다
                       또한 where 엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where 를 무시한다
                       단, name 부분에 where  를 빼주지 않으면 where where 이렇게 SQL 문이 작성된다
                       엘리먼트 구문이 and 나 or 로 시작하면 자동으로 해당 단어를 지워준다-->
<!--필기 .<trim> 태그 : 조회 조건에 and 혹은 or 로 시작하지 않는 다른 문자로 시작하는 경우 등
                       where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해
                       trim 엘리먼트를 제공한다
                       1. prefix 속성 : 처리후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
                       2. prefixOverrides 속성 : 처리 후 엘리먼트 내용중 가장 앞에 속성값에 해당하는 문자를 자동 삭제 , 지정된 구문 제거
                       3. suffix 속성 : 처리후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
                       4. suffixOverrides 속성 : 처리후 엘리먼트 내용중 가장 뒤에 속성값에 해당하는 문자 자동 삭제-->
    <select id="searchMenuByNameOrCategory" resultMap="menuResultMap" parameterType="hashmap">
        select * from tbl_menu
<!--필기. 문제 발생 상황 : 카테고리만 검색을 하는 경우 where 가 붙지 않아 문법오류 발생-->
<!--        <if test="nameValue !=null">-->
<!--            where menu_name like concat('%',#{nameValue},'%')-->
<!--        </if>-->
<!--        <if test="categoryValue !=null">-->
<!--            and category_code = #{categoryValue}-->
<!--        </if>-->
<!--필기. 해결방법 1 : <where> 태그 이용 -->
<!--        <where>-->
<!--            <if test="nameValue != null">-->
<!--                menu_name like concat('%' , #{nameValue},'%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--                and category_code = #{categoryValue}-->
<!--            </if>-->
<!--        </where>-->
<!--필기. 해결방법 2 : <trim> 태그 이용 -->
        <trim prefix="where" prefixOverrides="and | or">
            <if test="nameValue !=null">
                menu_name like concat('%',#{nameValue},'%')
            </if>
            <if test="categoryValue != null">
                and category_code = #{categoryValue}
            </if>
        </trim>

    </select>
<!--필기. update 의 경우 모든 컬럼에 대하여 수정할 값을 입력한다는 가정하에 아래 쿼리문을 작성할 수 있다
         하지만 값을 입려한 일부 칼럼만 값을 변경 하려면, 아래와 같은 쿼리문은 수정을 원치 않은 값까지 변경할 가능성이 있다
         따라서, 값을 입력한 일부 칼럼만 수정하기 위해 <if>태그를 활용할 수 있다-->
    <update id="modifyMenu" parameterType="hashmap">
<!--        update tbl_menu-->
<!--        set-->
<!--        menu_name = #{name},-->
<!--        category_code =#{categoryCode},-->
<!--        orderable_status = #{orderableStatus}-->
<!--        where -->
<!--        menu_code = #{code}-->
<!--문제 발생 상황 : 메뉴명 값을 입력하지 않은 경우 set이 붙지 않아 쿼리 오류 발생-->
<!--        update -->
<!--            tbl_menu-->
<!--        <if test="name !=null and name !=''">-->
<!--            set menu_name = #{name}-->
<!--        </if>-->
<!--        <if test="categoryCode!=null and categoryCode gt 0">-->
<!--            ,category_code = #{categoryCode}-->
<!--        </if>-->
<!--필기. 해결방안 1. <set> 엘리먼트 사용 -->
<!--        update tbl_menu-->
<!--        <set>-->
<!--            <if test="name!=null and name!=''">-->
<!--                menu_name = #{name}-->
<!--            </if>-->
<!--            <if test="categoryCode!=null and categoryCode gt > 0">-->
<!--                 ,category_code = #{categoryCode}-->
<!--            </if>-->
<!--            <if test="orderableStatus !=null and orderableStatus !=''">-->
<!--                ,orderable_status = #{orderableStatus}-->
<!--            </if>-->
<!--        </set>-->
<!--        where menu_code =#{code}-->
<!--필기. 해결방안 2. <trim> 태그 이용-->
        update tbl_menu
        <trim prefix="set" prefixOverrides=",">
            <if test="name !=null and name!='' ">
                menu_name = #{name}
            </if>
            <if test="categoryCode !=null and categoryCode gt 0">
                ,category_code = #{categoryCode}
            </if>
            <if test="orderableStatus !=null and orderableStatus!=''">
                ,oderable_status = #{orderableStatus}
            </if>
        </trim>
        where menu_code = #{code}
    </update>


</mapper>