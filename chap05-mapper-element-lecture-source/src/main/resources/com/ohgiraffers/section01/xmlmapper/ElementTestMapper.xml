<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xmlmapper.ElementTestMapper">
<!--필기. Mapper.xml 파일에서 사용할 수 있는 엘리먼트는 총 9 가지 이다
        <cache> , < cache-ref> , <resultMap> <parameterMap> , <sql> , <select> , < insert>, <update>,<delete>-->
<!--필기. <cache> 엘리먼트-->
<!--필기.
        1. eviction : 캐시 알고리즘 속성, LRU,FIFO,SOFT,WEAK 디폴트는 LRU
        2. flushInterval : 설정된 캐시를 얼마동안 유지할 지 밀리초 단위로 양수만 설정가능-
        3. size : 캐시에 저장할 객체의 수를 지정, 디폴트는 1024(더 크게 가능하지만 메모리 고려)
        4. readonly : 읽기만 가능한 경우 캐시 데이터의 변경이 되지 않음
        -캐시란? 컴퓨터 과학에서 데이터나 값을 미리 복사해둔 임시 장소를 가리킨다
        -값을 다시 계산하는 경우 시간을 절약하고 싶을 때 사용한다
        -캐시에 데이터를 미리 복사 해두면 접근 시간 없이 더 빠른 속도로 데이터에 접근 가능하다 -->
    <cache eviction="LRU" flushInterval="1000" size="512" readOnly="true"/>
    <select id="selectCacheTest" resultType="java.lang.String">
        select
            menu_name
        from
            tbl_menu
    </select>

<!--필기. <resultMap> 엘리먼트 -->
<!--필기.
        1. DB 에서 조회한 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트이다
        2. resultMap 엘리먼트는 MyBatis 에서 가장 중요하고 강력한 엘리먼트이다
        3. JDBC에서의 ResultSet 에서 데이터를 가져올때 작성되는 JDBC 코드를 줄여주는 역할을 한다
        4. 실제로 join 맵핑과 같은 복잡한 코드는 굉장히 많은 코드가 필요한데 ResultMap은 이걸 효율적으로 바꿔준다-->
<!--필기. 속성
        1. id : 맵핑구문에서 결과 매핑을 사용할 때 구분하기 위한 ID 역할
        2. type : 결과 맵핑을 적용하는 대상 객체 타입(맵핑 구문의 결과 데이터를 저장할 JAVA 타입 지정
        3. extends : 자바의 상속 처럼 기존에 정의된 매핑 결과를 상속받아 확장할 수 있다
        4. automapping : 결과 맵핑을 자동으로 할것인지를 결정
                         automapping 설정은 동일한 컬럼명이 있는 경우 위험성을 가진다 . 따라서 사용하지 않는 것을 권장-->
    <resultMap id="menuResultMap1" type="MenuDto" autoMapping="false">
        <id property="code" column="menu_code"/>
        <result property="name" column="menu_name"/>
        <result property="categoryCode" column="category_code"/>
    </resultMap>
<!--필기. extends 속성으로 기존 menuResultMap1 을 확장했기 때문에 추가하고 싶은 것만 넣으면된다-->
    <resultMap id="menuResultMap2" type="com.ohgiraffers.common.MenuDto" extends="menuResultMap1">
        <result property="orderableStatus" column="orderable_status"/>
    </resultMap>
<!--필기. 만약 menuResultMap1 을 결과값으로 만들면
         맵핑되지 않은 orderableStatus 는 null로 출력이 된다 연결이 안되어있으니 집어 넣을 수 없다는 것이다-->
    <select id="selectResultMapTest" resultMap="menuResultMap2">
        select
            menu_code,
            menu_name,
            menu_price,
            category_code,
            orderable_status
        from
            tbl_menu
    </select>
<!--필기. <resultMap>의 하위 엘리먼트
        1. id : pk 컬럼을 매핑하기 위한 태그이다 (성능 향상)
        2. result : pk 가 아닌 일반 칼럼을 맵핑하기 위한 태그
        3. constructor : 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용 (여지껏 필드에 세터처럼 맵핑을 했다면 매개변수 있는 생성자에대가
                            직접 넣는 느낌으로 이해하면 편하다)-->
<!--필기. <constructor>
            <idArg> , <arg> 하위 엘리먼트들이 있다
            id, result 엘리먼트는 setter 를 이용하기 때문에 property를 지정하지만
            생성자는 순서와 타입을 맞춰서 사용한다-->
    <resultMap id="menuResultMap3" type="MenuDto">
        <constructor>
            <idArg column="menu_code" javaType="_int"/>
            <arg column="menu_name" javaType="string"/>
            <arg column="menu_price" javaType="_int"/>
            <arg column="category_code" javaType="_int"/>
            <arg column="orderable_status" javaType="string"/>
        </constructor>
    </resultMap>

    <select id="selectResultMapConstructorTest" resultMap="menuResultMap3">
        select
            menu_code,
            menu_name,
            menu_price,
            category_code,
            orderable_status
        from
            tbl_menu
        where
            orderable_status = 'Y'
    </select>

</mapper>